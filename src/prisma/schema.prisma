// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../lib/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SYSTEM
}

model User {
  id          String    @id @default(cuid(2))                                        @db.VarChar(36)
  name        String                                                                 @db.VarChar(64)
  email       String    @unique                                                      @db.VarChar(255)
  password    String                                                                 @db.VarChar(60)
  role        Role      @default(USER)
  verifiedAt  DateTime?                          @map("verified_at")                 @db.Timestamptz(3)
  createdAt   DateTime  @default(now())          @map("created_at")                  @db.Timestamptz(3)
  updatedAt   DateTime? @updatedAt               @map("updated_at")                  @db.Timestamptz(3)
  deletedAt   DateTime?                          @map("deleted_at")                  @db.Timestamptz(3)

  otp         OTP?
  workspaces  Workspace[]
  tags        Tags[]

  @@map("user")
}

model OTP {
  id          String    @id @default(cuid(2))                                        @db.VarChar(36)
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique                 @map("user_id")                      @db.VarChar(36)
  code        String                                                                 @db.VarChar(60)
  note        String?                                                                @db.VarChar(255)
  expiredAt   DateTime?                         @map("expired_at")                   @db.Timestamptz(3)
  createdAt   DateTime  @default(now())         @map("created_at")                   @db.Timestamptz(3)

  @@map("otp")
}

model Workspace {
  id           String   @id @default(cuid(2))                                       @db.VarChar(36)
  user         User     @relation(fields: [userId], references: [id])
  userId       String                     @map("user_id")                           @db.VarChar(36)
  name         String                                                               @db.VarChar(36)
  createdAt    DateTime  @default(now())  @map("created_at")                        @db.Timestamptz(3)
  updatedAt    DateTime? @updatedAt       @map("updated_at")                        @db.Timestamptz(3)

  lists        List[]

  @@map("workspace")
}


model List {
  id           String    @id @default(cuid(2))                                      @db.VarChar(36)
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId  String                     @map("workspace_id")                      @db.VarChar(36)
  name         String                                                               @db.VarChar(36)
  color        String                                                               @db.VarChar(8)
  description  String                                                               @db.VarChar(255)
  createdAt    DateTime  @default(now())  @map("created_at")                        @db.Timestamptz(3)
  updatedAt    DateTime? @updatedAt       @map("updated_at")                        @db.Timestamptz(3)

  // tasks        Task[]

  @@map("list")
}

model Task {
  id           String    @id @default(cuid(2))                                      @db.VarChar(36)
  // list         List @relation(fields: [listId], references: [id])
  // listId       String                     @map("list_id")                          @db.VarChar(36)
  title        String                                                               @db.VarChar(72)
  description  String                                                               @db.VarChar(255)
  dueDate      DateTime                   @map("due_date")                          @db.Timestamptz(3)
  important    Boolean                                                              @db.Boolean
  done         Boolean                                                              @db.Boolean
  createdAt    DateTime  @default(now())  @map("created_at")                        @db.Timestamptz(3)
  updatedAt    DateTime? @updatedAt       @map("updated_at")                        @db.Timestamptz(3)

  tags         Tags[]

  @@map("task")
}

model Tags {
  id           String    @id @default(cuid(2))                                      @db.VarChar(36)
  user         User      @relation(fields: [userId], references: [id])
  userId       String                     @map("user_id")                           @db.VarChar(36)
  task         Task      @relation(fields: [taskId], references: [id])
  taskId       String                     @map("task_id")                           @db.VarChar(36)
  tag          String                                                               @db.VarChar(36)

  @@map("tags")
}
